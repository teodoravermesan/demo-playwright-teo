/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./role.provider";
import * as i2 from "./acl.service";
/**
 * Access checker service.
 *
 * Injects `NbRoleProvider` to determine current user role, and checks access permissions using `NbAclService`
 */
export class NbAccessChecker {
    constructor(roleProvider, acl) {
        this.roleProvider = roleProvider;
        this.acl = acl;
    }
    /**
     * Checks whether access is granted or not
     *
     * @param {string} permission
     * @param {string} resource
     * @returns {Observable<boolean>}
     */
    isGranted(permission, resource) {
        return this.roleProvider.getRole()
            .pipe(map((role) => Array.isArray(role) ? role : [role]), map((roles) => {
            return roles.some(role => this.acl.can(role, permission, resource));
        }));
    }
}
NbAccessChecker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NbAccessChecker, deps: [{ token: i1.NbRoleProvider }, { token: i2.NbAclService }], target: i0.ɵɵFactoryTarget.Injectable });
NbAccessChecker.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NbAccessChecker });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NbAccessChecker, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NbRoleProvider }, { type: i2.NbAclService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzLWNoZWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvc2VjdXJpdHkvc2VydmljZXMvYWNjZXNzLWNoZWNrZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFFckM7Ozs7R0FJRztBQUVILE1BQU0sT0FBTyxlQUFlO0lBRTFCLFlBQXNCLFlBQTRCLEVBQVksR0FBaUI7UUFBekQsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBQVksUUFBRyxHQUFILEdBQUcsQ0FBYztJQUMvRSxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsU0FBUyxDQUFDLFVBQWtCLEVBQUUsUUFBZ0I7UUFDNUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRTthQUMvQixJQUFJLENBQ0gsR0FBRyxDQUFDLENBQUMsSUFBcUIsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ25FLEdBQUcsQ0FBQyxDQUFDLEtBQWUsRUFBRSxFQUFFO1lBQ3RCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQzs7NkdBcEJVLGVBQWU7aUhBQWYsZUFBZTs0RkFBZixlQUFlO2tCQUQzQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJSb2xlUHJvdmlkZXIgfSBmcm9tICcuL3JvbGUucHJvdmlkZXInO1xuaW1wb3J0IHsgTmJBY2xTZXJ2aWNlIH0gZnJvbSAnLi9hY2wuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogQWNjZXNzIGNoZWNrZXIgc2VydmljZS5cbiAqXG4gKiBJbmplY3RzIGBOYlJvbGVQcm92aWRlcmAgdG8gZGV0ZXJtaW5lIGN1cnJlbnQgdXNlciByb2xlLCBhbmQgY2hlY2tzIGFjY2VzcyBwZXJtaXNzaW9ucyB1c2luZyBgTmJBY2xTZXJ2aWNlYFxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmJBY2Nlc3NDaGVja2VyIHtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcm9sZVByb3ZpZGVyOiBOYlJvbGVQcm92aWRlciwgcHJvdGVjdGVkIGFjbDogTmJBY2xTZXJ2aWNlKSB7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYWNjZXNzIGlzIGdyYW50ZWQgb3Igbm90XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwZXJtaXNzaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZVxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxib29sZWFuPn1cbiAgICovXG4gIGlzR3JhbnRlZChwZXJtaXNzaW9uOiBzdHJpbmcsIHJlc291cmNlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5yb2xlUHJvdmlkZXIuZ2V0Um9sZSgpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKChyb2xlOiBzdHJpbmd8c3RyaW5nW10pID0+IEFycmF5LmlzQXJyYXkocm9sZSkgPyByb2xlIDogW3JvbGVdKSxcbiAgICAgICAgbWFwKChyb2xlczogc3RyaW5nW10pID0+IHtcbiAgICAgICAgICByZXR1cm4gcm9sZXMuc29tZShyb2xlID0+IHRoaXMuYWNsLmNhbihyb2xlLCBwZXJtaXNzaW9uLCByZXNvdXJjZSkpO1xuICAgICAgICB9KSxcbiAgICAgICk7XG4gIH1cbn1cbiJdfQ==