import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NB_SECURITY_OPTIONS_TOKEN } from './security.options';
import { NbAclService } from './services/acl.service';
import { NbAccessChecker } from './services/access-checker.service';
import { NbIsGrantedDirective } from './directives/is-granted.directive';
import * as i0 from "@angular/core";
export class NbSecurityModule {
    static forRoot(nbSecurityOptions) {
        return {
            ngModule: NbSecurityModule,
            providers: [
                { provide: NB_SECURITY_OPTIONS_TOKEN, useValue: nbSecurityOptions },
                NbAclService,
                NbAccessChecker,
            ],
        };
    }
}
NbSecurityModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NbSecurityModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NbSecurityModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.12", ngImport: i0, type: NbSecurityModule, declarations: [NbIsGrantedDirective], imports: [CommonModule], exports: [NbIsGrantedDirective] });
NbSecurityModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NbSecurityModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NbSecurityModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                    ],
                    declarations: [
                        NbIsGrantedDirective,
                    ],
                    exports: [
                        NbIsGrantedDirective,
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ZyYW1ld29yay9zZWN1cml0eS9zZWN1cml0eS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSx5QkFBeUIsRUFBZ0IsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOztBQWF6RSxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWdDO1FBQzdDLE9BQU87WUFDTCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7Z0JBQ25FLFlBQVk7Z0JBQ1osZUFBZTthQUNoQjtTQUNGLENBQUM7SUFDSixDQUFDOzs4R0FWVSxnQkFBZ0I7K0dBQWhCLGdCQUFnQixpQkFOekIsb0JBQW9CLGFBSHBCLFlBQVksYUFNWixvQkFBb0I7K0dBR1gsZ0JBQWdCLFlBVHpCLFlBQVk7NEZBU0gsZ0JBQWdCO2tCQVg1QixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3FCQUNiO29CQUNELFlBQVksRUFBRTt3QkFDWixvQkFBb0I7cUJBQ3JCO29CQUNELE9BQU8sRUFBRTt3QkFDUCxvQkFBb0I7cUJBQ3JCO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IE5CX1NFQ1VSSVRZX09QVElPTlNfVE9LRU4sIE5iQWNsT3B0aW9ucyB9IGZyb20gJy4vc2VjdXJpdHkub3B0aW9ucyc7XG5pbXBvcnQgeyBOYkFjbFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2FjbC5zZXJ2aWNlJztcbmltcG9ydCB7IE5iQWNjZXNzQ2hlY2tlciB9IGZyb20gJy4vc2VydmljZXMvYWNjZXNzLWNoZWNrZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOYklzR3JhbnRlZERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9pcy1ncmFudGVkLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE5iSXNHcmFudGVkRGlyZWN0aXZlLFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgTmJJc0dyYW50ZWREaXJlY3RpdmUsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIE5iU2VjdXJpdHlNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChuYlNlY3VyaXR5T3B0aW9ucz86IE5iQWNsT3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TmJTZWN1cml0eU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmJTZWN1cml0eU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IE5CX1NFQ1VSSVRZX09QVElPTlNfVE9LRU4sIHVzZVZhbHVlOiBuYlNlY3VyaXR5T3B0aW9ucyB9LFxuICAgICAgICBOYkFjbFNlcnZpY2UsXG4gICAgICAgIE5iQWNjZXNzQ2hlY2tlcixcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19